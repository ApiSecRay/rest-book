import org.apache.batik.transcoder.image.PNGTranscoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;


buildscript {
  repositories {
    mavenCentral()
    maven { 
      url 'http://repository.jboss.org/nexus/content/groups/public/'
    }
  }
  
  dependencies {
    classpath 'org.jboss.jdocbook:gradle-jdocbook:1.2.2', 
              'org.jboss:jbossorg-docbook-xslt:1.1.1',
              "org.apache.xmlgraphics:batik-transcoder:$batikVersion",
              "org.apache.xmlgraphics:batik-codec:$batikVersion"
  }
}

apply plugin: "jdocbook"

jdocbook {
  restApiDevelopment {
    masterSourceDocumentName = 'index.xml'
    transformerParameters([
      'section.autolabel': '1',
      'section.label.includes.component.label': '1',
      'generate.toc': 'appendix nop  book toc,title  part nop'
    ])
    format {
      name = 'html_single'
      finalName = 'restApiDevelopment.html'
    }
    format {
      name = 'pdf'
      finalName = 'restApiDevelopment.pdf'
    }
  }
}

gradle.taskGraph.whenReady { graph ->
  graph.allTasks.findAll { it.name.startsWith('renderDocBook_') }.each { task ->
    task.inputs.dir file('src/main/docbook')
    task.dependsOn 'generateImages'
  }
}

defaultTasks 'buildDocs'

task generateImages {
  def baseDir = file('src/main/docbook/restApiDevelopment/en-US')
  def figuresDir = new File(baseDir, 'figures') 
  def imagesDir = new File(baseDir, 'images')
  doLast {
    figuresDir.listFiles().findAll { it.name.endsWith('.svg') }.each { source ->
      def target = new File(imagesDir, source.name.substring(0, source.name.lastIndexOf('.') + 1) + 'png')
      exportToPng(source, target)
    }
  }
}

def exportToPng(source, target) {
  try {
    def input = new TranscoderInput(source.toURL().toString())
    def stream = new FileOutputStream(target.path)
    def output = new TranscoderOutput(stream)
    try {
      new PNGTranscoder().transcode(input, output)
    } finally {  
      stream.flush();
      stream.close();
    }
  } catch (Exception e) {
    target.delete()
    throw new GradleException("Error exporting $source.name to $target.name:\n$e.message", e)
  }
}
