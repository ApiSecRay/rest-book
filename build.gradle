import org.apache.batik.transcoder.image.PNGTranscoder;
import org.apache.batik.transcoder.TranscoderInput;
import org.apache.batik.transcoder.TranscoderOutput;

buildscript {
  repositories {
    jcenter { 
      url 'http://dl.bintray.com/radl/RADL'
    }
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'http://repository.jboss.org/nexus/content/groups/public/' }
    maven { url 'http://repo.spring.io/plugins-release' }
  }
  
  dependencies {
    classpath 'org.jboss.jdocbook:gradle-jdocbook:1.2.2', 
              'org.jboss:jbossorg-docbook-xslt:1.1.1',
              "org.apache.xmlgraphics:batik-transcoder:$batikVersion",
              "org.apache.xmlgraphics:batik-codec:$batikVersion",
              "radl:radl-gradle:$radlGradleVersion",
              "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
              'io.spring.gradle:docbook-reference-plugin:0.3.1'
  }
}

apply plugin: 'java'

sourceCompatibility = 1.8
group = 'com.github.apisecray'
version = '1.0.0'

defaultTasks 'build'

repositories {
  maven { url 'https://repo.spring.io/snapshot' }
  mavenCentral()
  jcenter { 
    url 'http://dl.bintray.com/radl/RADL'
  }
}

apply plugin: 'spring-boot'

dependencies {
  compile 'org.springframework.boot:spring-boot-starter-web',
      'org.springframework.boot:spring-boot-starter-data-jpa',
      'org.springframework.hateoas:spring-hateoas:0.20.0.RELEASE',
      'com.fasterxml.jackson.core:jackson-core:2.8.0',
      'com.jayway.jsonpath:json-path',
      'commons-io:commons-io:2.5',
      'commons-lang:commons-lang:2.6',
      'de.escalon.hypermedia:hydra-spring:0.2.0-beta2',
      'org.json:json:20141113',
      'org.javamoney:moneta:1.1'
  testCompile 'junit:junit:4.12','org.jbehave:jbehave-core:4.0.5', 
      'org.springframework.boot:spring-boot-starter-test'
  runtime("com.h2database:h2")
}

jar {
  baseName = 'restbucks'
  version = '1.0.0'
}

test {
  outputs.upToDateWhen { false }
  doFirst {
    file('target').mkdirs() // Required by JBehave
  }
  doLast {
    // Prepare pretty HTML report
    def dir = file("$buildDir/reports/acceptance-tests")
    def resultDir = file('target/jbehave')
    ant.move(todir: dir.path) {
      fileset(dir: new File(resultDir, 'view').path, excludes: "**/*.xml.html")
    }
    def testResourcesDir = sourceSets.test.resources.srcDirs[0].path
    ant.copy(todir: dir.path) {
      fileset(dir: testResourcesDir, includes: "**/*.css")
      fileset(dir: testResourcesDir, includes: "**/*.png")
    }
    
    // Count results
    def numTested = 0
    def numFailed = 0
    def numPending = 0
    def failingScenarios = []
    resultDir.listFiles().findAll { it.name.endsWith('.xml') && !it.name.endsWith('Stories.xml') }.each {
      new XmlSlurper().parse(it).scenario.each {
        def failed = false
        def pending = false
        it.step.each {
          if (it.@outcome == 'failed') {
            failed = true
          } else if (it.@outcome == 'pending') {
            pending = true
          }
        }
        numTested++
        if (failed) {
          numFailed++
          failingScenarios.add it.@title
          it.failure.each { failingScenarios.add "- ${it.toString().split('\n')[0]}" }
        } else if (pending) {
          numPending++
        }
      }
    }
    def message = "Acceptance tests: $numTested scenarios, $numFailed failed, $numPending pending"
    ant.delete(dir: file('target').path, failonerror: false)
    if (numFailed > 0) {
      throw new GradleException(message + '\n' + failingScenarios.join('\n'))
    }
    println message
  }
}


apply plugin: 'eclipse'

eclipse {
  classpath {
    defaultOutputDir = file('classes')
  }
}


apply plugin: 'radl-gradle'

radl {
  coreVersion = radlCoreVersion
  serviceName = 'RESTBucks'
  packagePrefix = 'restbucks.rest'
  generateSpring = true
}


apply plugin: 'docbook-reference'

reference {
  sourceDir = file('src/main/docbook')
  pdfFilename = 'restbook.pdf'
  epubFilename = 'restbook.epub'
}

assemble.dependsOn reference


/* OTHER DOCBOOK PLUGIN
apply plugin: 'jdocbook'

jdocbook {
  restApiDevelopment {
    masterSourceDocumentName = 'book.xml'
    transformerParameters([
      'section.autolabel': '1',
      'section.label.includes.component.label': '1',
      'generate.toc': 'appendix nop  book toc,title  part nop'
    ])
    format {
      name = 'html_single'
      finalName = 'restApiDevelopment.html'
    }
    format {
      name = 'pdf'
      finalName = 'restApiDevelopment.pdf'
    }
  }
}

tasks.findAll { it.name.toLowerCase().contains('docbook') }.each {
  it.inputs.dir file('src/main/docbook')
}

build.dependsOn 'buildDocs'
defaultTasks 'buildDocs'
*/

task wrapper(type: Wrapper) {
  gradleVersion = 2.14
}
