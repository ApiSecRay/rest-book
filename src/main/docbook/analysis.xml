<chapter id="analysis">
  <title>Analysis</title>
  <para>
    In this chapter we will look at the requirements for RESTBucks and how they affect the REST API. We'll look at 
    both functional and non-functional requirements and how to meet them in a way that is pleasant for the consumers of 
    the API. <firstterm>Functional requirements</firstterm> define what a system is supposed to <emphasis>do</emphasis>, 
    while <firstterm>non-functional requirements</firstterm> define how a system is supposed to <emphasis>be</emphasis>.
  </para>
  
  <section>
    <title>Functional Requirements</title>
    <para>
      To understand functional requirements, one must understand the application's <firstterm>domain</firstterm>, the 
      subject area to which the user applies the program <citation>Evans04</citation>.
    </para>
    <para>
      We want to capture the domain in a way that is optimized for REST APIs. Since an API exist to be consumed by 
      a client, we should document the domain from the client's point of view.
    </para>
    
    <section id="state-diagrams">
      <title>Capturing Requirements With State Diagrams</title>
      <para>        
        A REST client starts at some well-known URI, what we called the billboard URI in 
        <xref linkend="uniform-interface"/>. It then follows links that it finds using link relations until its goal is
        met. In other words, the client starts at some initial state, and then transitions to other states by following
        links (i.e. executing HTTP methods against URIs) that are discovered from the previously returned 
        representation, as shown in <xref linkend="client-flow"/>.
      </para>
      <para>
        A natural way to capture this information is in the form of a <firstterm>state diagram</firstterm>. 
        State diagrams are used to give an abstract description of the behavior of a system. This behavior is analyzed 
        and represented in a series of events that may occur in one or more states.
      </para> 
      <para>
        Mathematically, a state diagram is a <firstterm>directed graph</firstterm> with the following elements:
      </para>
      <variablelist>
        <varlistentry>
          <term>Vertices</term>
          <listitem>
            <para>
              A finite set of states, normally represented by circles and labeled with unique designator symbols or words 
              written inside them.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Input</term>
          <listitem>
            <para>
              A finite collection of inputs to the system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Edges</term>
          <listitem>
            <para>
              Transitions between states, triggered by some input. An edge is usually drawn as an arrow directed from 
              the current state to the next state, with the input next to the edge.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Start state</term>
          <listitem>
            <para>
              The start state is sometimes represented by an arrow without origin pointing to the state, but sometimes 
              the start state is shown as as regular state as well.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Accepting state</term>
          <listitem>
            <para>
              An accepting, final, or end state, is a special state at which the program is allowed to stop processing.
              It is usually drawn as a double circle, but sometimes as a colored circle.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <figure id="client-flow">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/client.png" scale="68" align="center"/>
          </imageobject>
        </mediaobject>
        <title>Basic flow of a REST client</title>
      </figure>
      <para>
        The notion of a state diagram maps nicely onto the flow of a REST client:
      </para>
      <informaltable>
        <thead>
          <tr>
            <th>State diagram element</th>
            <th>REST equivalent</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Vertix</td>
            <td>Application state</td>
          </tr>
          <tr>
            <td>Input</td>
            <td>A link relation or form input</td>
          </tr>
          <tr>
            <td>Edge</td>
            <td>
              A link in a server response that the client can follow. The URI of such a link is discovered 
              by looking for a specific link relation
            </td>
          </tr>
          <tr>
            <td>Start state</td>
            <td>
              The representation returned by the server as the response to a <literal>GET</literal> on the system's 
              billboard URI
            </td>
          </tr>
          <tr>
            <td>Accepting state</td>
            <td>Any state in which the client has achieved a goal</td>
          </tr>
        </tbody>
      </informaltable>
    </section>

    <section id="sd-restbucks">
      <title>State Diagrams for RESTBucks</title>        
      <para>
        Let's apply this little bit of theory to our RESTBucks example.
      </para>
      <para>
        When a customer arrives, she reads the menu and orders something off it. The cashier presents her with 
        the total amount due, and she pays him. The cashier hands her a receipt and adds the order to the barista's 
        queue. In time, the barista will pop the order of the queue and prepare it. Once done, he notifies the 
        customer, who then takes her serving.
      </para>
      <para>
        That's the whole process. Now we have to split that up per actor, since the different actors each go through 
        their own states and thus have their own state diagrams. Here's one for the customer:
      </para>
      <figure id="sd-customer-happy-path">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sd-customer-happy-path.png" scale="68" align="center"/>
          </imageobject>
        </mediaobject>
        <title>Partial state diagram for a RESTBucks customer</title>
      </figure>
      <para>
        The process starts when the customer walks into the store. We'll call this initial state 
        <literal>Arrived</literal>. She then reads the menu to move to the <literal>Deciding</literal> state, where she
        selects items from the menu that she wants to order. She then places the order with the cashier and moves to 
        the <literal>Ordered</literal> state. The cashier will tell her the
        amount due and she'll pay and move to the <literal>Paid</literal> state. She'll take the receipt that the 
        cashier gives here and moves to the <literal>Waiting state</literal>. While she waits, the cashier places the 
        order on the barista's queue and at some point the barista pops that order off and prepares it. The customer
        receives a notification from the barista and moves to the <literal>Served</literal> state, where the serving is
        ready for her. She then takes the serving and hopefully leaves the store as a happy customer.
      </para>
      <para>
        Of course, this is just the part of the workflow where everything goes according to plan, the so-called 
        <firstterm>happy path</firstterm> or <firstterm>main success scenario</firstterm>. But a customer can 
        also cancel or change an order that she hasn't paid for yet:
      </para>
      <figure id="sd-customer">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sd-customer.png" scale="68" align="center"/>
          </imageobject>
        </mediaobject>
        <title>Complete state diagram for a RESTBucks customer</title>
      </figure>
      <para>
        As you can see, the process is mostly linear for the customer, focused on achieving a single goal: to get her
        coffee. This is typical for workflow type of interactions, which we'll discuss in more detail in 
        <xref linkend="workflow"/>. 
      </para>
      <para>
        The state diagram looks a bit different for the cashier and the barista: they work in loops, serving one 
        customer after another. This is another common pattern, as we'll see in <xref linkend="processor"/>.
        Here's the state diagram for the cashier:
      </para>
      <figure id="sd-cashier">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sd-cashier.png" scale="68" align="center"/>
          </imageobject>
        </mediaobject>
        <title>State diagram for a RESTBucks cashier</title>
      </figure>
      <para>
        The cashier starts his day when the store openes with waiting for the first customer. As some point a customer 
        walks in and the cashier accepts her order, moving him to the <literal>Inputing order</literal> state where he
        pushes the correct buttons on the cash register. He then tells the customer the amount due, which puts him in
        the <literal>Awaiting payment</literal> state. If the customer cancels her order, the cashier moves on to the
        next customer. But when the customer pays, the cashier moves to the <literal>Payment received</literal> state. 
        He then gives the customer her receipt. Finally he places the order on the barista's queue
        and turns to the next customer. At the end of his shift, he terminates the process by going home.
      </para>
      <para>
        The state diagram for the barista is a similar loop:
      </para>
      <figure id="sd-barista">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sd-barista.png" scale="68" align="center"/>
          </imageobject>
        </mediaobject>
        <title>State diagram for a RESTBucks barista</title>
      </figure>
      <para>
        The barista starts his day waiting for the cashier to place an order on his queue. When that happens, he takes
        the order off the queue and prepares it. Once done, he notifies the customer and waits for her to take her
        serving. Then he's ready to take on the next order. At the end of his shift, he terminates the process by 
        going home.
      </para>
    </section>
    
    <section id="examples">
      <title>Capturing Requirements With Examples</title>
      <para>
        Traditionally, requirements have been captured in text form in requirement documents in a natural language like
        English. One problem with this approach is that natural language is ambiguous, as different people read 
        different things into the same words based on their background and experience.
        One solution to this problem is to make the requirements more concrete by using examples. This is approach is
        very common in the REST community.
      </para>
      <para>
        The Agile software development movement has also embraced examples as concise and precise ways of capturing 
        requirements. This is often referred to as Specification By Example <citation>Adzic09</citation>. It is 
        actually a much more rigorous approach than what we usually see with REST APIs. Let's look at this in a bit
        more detail, and then tie it back to state diagrams.
      </para>
    </section>
    
    <section id="bdd">
      <title>Automating Examples With Behavior-Driven Development (BDD)</title>
      <para>
        You can capture the information that is embedded in a state diagram in a different form called 
        <firstterm>Gherkin syntax</firstterm>. Here's what the happy path state diagram for the customer would look 
        like in Gherkin:
      </para>
       <example id="bdd-customer-happy-path">
        <title>Chrissy orders a latte</title>
        <programlisting>Given a customer Chrissy
When she reads the menu
And she orders a tall whole milk caffe latte
Then she is due USD 2.75 
When she pays
Then she is handed a receipt
When she takes the receipt
Then she must wait for the barista
When the barista calls her name
Then her serving is ready
When she takes her serving
Then she is happy
</programlisting>
       </example>	        
      <para>
        Each line starts with a keyword:
      </para>
      <variablelist>
        <varlistentry>
          <term><userinput>Given</userinput></term>
          <listitem>
             <para>Indicates the current state of the system</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><userinput>When</userinput></term>
          <listitem>
            <para>Indicates the input that transitions the system to a new state</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><userinput>Then</userinput></term>
          <listitem>
            <para>Indicates something that must be true in the new state</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><userinput>And</userinput></term>
          <listitem>
            <para>
              Is a shorthand for the keyword of the preceding line. It makes the text more natural to read by removing 
              duplication
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Since this syntax relies heavily on the keywords <literal>Given</literal>, <literal>When</literal>, and
        <literal>Then</literal>, it is sometimes also referred to as Given/When/Then.
      </para>
      <para>
        The real power of Given/When/Then is the <userinput>Then</userinput> keyword. It allows us to describe what 
        state the system <emphasis>should</emphasis> be in. In other words, Gherkin syntax gives us a 
        <emphasis>testing language</emphasis>. This testing language is the basis for the Agile practice of 
        Behavior-Driven Development.
      </para>
      <para>
        <firstterm>Behavior-Driven Development</firstterm> (BDD) is one variant of Agile acceptance testing. Much more 
        than testing, it is a collaborative process where the Product Owner, developers, and testers cooperate to 
        deliver software that brings value to the business.
      </para>
      <para>
        This process is made possible by the <emphasis>executable</emphasis> requirements that BDD gives use. You 
        write scenarios in Gherkin format, and they are run by a computer program to test whether the system behaves as 
        desired. This is made possible by a scenario parser that translates the Gherkin syntax into
         method calls in your programming language. For instance, <citation>JBehave</citation> is a BDD framework for 
         Java that contains such a parser. The methods that the parser calls are the glue code between the scenarios 
         and your application. This glue code is where you would call your application's REST API.
       </para>
      <para>
        Requirements can be made executable because the scenarios focus on external behavior and use examples with 
        concrete values. Compare that to the state diagram in <xref linkend="sd-customer-happy-path"/>, which shows 
        internal states like <literal>Deciding</literal> and uses more abstract terms like <literal>Select from 
        menu</literal>.
        We can't know from looking at a state diagram what's on the menu or what is selected in the customer's order.
        In a BDD scenario, however, everything is spelled out explicitly. The customer orders a latte rather than a hot 
        tea, for example. These concrete values can be checked by a computer program.
      </para>
      <para>
        Note that the concrete nature of the examples includes providing a name for the customer. This isn't actually
        necessary for this particular scenario to work, but sometimes it is. Sometimes we want the name to appear in 
        some record or on some report, so we verify that with a <literal>Then</literal> line.
      </para>
      <para>
        But even if we don't really need the name of the customer, it is still a good idea to include it. It gives
        us a clear focus on who we are doing this for. Usability experts use the term <firstterm>personas</firstterm> 
        for fictional characters created to represent the different user types that might use the product in a similar 
        way. Using the same personas in your BDD scenarios promotes shared understanding.
      </para>
      <para>
        The interesting part about Gherkin syntax is that there are very few constraints. There are only four keywords, 
        and each line must start with exactly one of them. The rest of the line is completely free format.
        We don't have to use a computer language, but can simply write in a natural language
        like English. This means that everybody can read and write scenarios, opening the door for collaboration. This 
        is a distinctive difference with most forms of automated tests, which can only be read and written by 
        developers and/or testers. At the same time, the concrete examples prevent us from falling into the ambiguity 
        trap that natural languages set for us.
      </para>
      <para>
        BDD scenarios are a great vehicle for promoting the use of the domain language by developers and testers
        and everybody else who is not a domain expert. When everybody speaks the same language, the chances of 
        misunderstandings decrease drastically, and thereby the chances of subtle bugs.
        We refer to this one language as the <firstterm>ubiquitous language</firstterm> <citation>Evans04</citation>.
      </para>
      <para>
        BDD scenarios are great for developers, since they provide quick and unequivocal feedback about whether the 
        story they are working on is done. Not only the main success scenario, but also alternate and exception
        scenarios can be provided, as can abuse cases. <firstterm>Abuse cases</firstterm> <citation>McGraw06</citation>
        describe how the system should behave when it interacts with someone who wants to use it in inappropriate ways.
        For instance, someone might want to get their evil hands on a hot beverage without paying for it.
       </para>
       <para>
        Adding alternate, exception, and abuse case scenarios requires that the Product Owner collaborates with 
        testers, developers, and security specialists. The payoff is that it becomes easier to manage all requirements,
        even security requirements, and build both quality and security in from the start. We'll look at exceptional
        cases in <xref linkend="error"/> and at abuse cases in <xref linkend="threat-modeling"/>.
      </para>
     </section>
      
     <section id="bdd-to-sd">
       <title>Deriving State Diagrams From BDD Scenarios</title>
       <para>
         Once we have BDD scenarios in Gherkin syntax, we can translate and merge those into a single state diagram
         that describes the entire system for a particular persona. This gives us a global sense of how we want our 
         system to behave for that type of user, and we may notice some inconsistencies that are difficult to spot 
         when working with the individual scenarios.
       </para>
       <para>
         Note that this doesn't have to be a Big Design Up Front (BDUF) approach. We can just as easily take one
         scenario and work it all the way through to shippable or even deployed code before we tackle the next scenario.
         The point is that at some point we must integrate all the various requirements that we have into a single 
         system. BDD scenarios can't give you that global overview, but a state diagram can. We don't have to use a
         state diagram either; we could even wait until we write code. But there are advantages to integrating early,
         when it's relatively cheap to change things. Drawing a state diagram is less costly than writing code.
       </para>
       <para>
         To translate a BDD scenario in Gherkin syntax into a state diagram, follow this procedure:
       </para>
       <procedure id="bdd-scenario-to-state-diagram">
         <title>Transform a Gherkin Scenario to a State Diagram</title>
         <step>
           <para>For each line of the scenario:</para>
           <substeps>
             <step>
               <para>
                 If the line starts with <literal>Given</literal> then create a new state, unless the previous line 
                 also started with <literal>Given</literal>. In the latter case, do nothing.
               </para>
             </step>
             <step>
               <para>
                 If the line starts with <literal>When</literal> then add a transition. If the previous line also
                 started with <literal>When</literal>, then add a new state at which the previous transition ends
                 and the current transition starts. Label the transition with the part of the line following
                 <literal>When</literal>.
               </para>
             </step>
             <step>
               <para>
                 If the line starts with <literal>Then</literal> then add a state, unless the previous line 
                 also started with <literal>Then</literal>. In the latter case, do nothing.
               </para>
             </step>
           </substeps>
         </step>
         <step>
           <para>
             For each state added in the previous step, add a suitable label.
           </para>
           <para>
						The states in the state diagram reflect the customer's <emphasis>internal</emphasis> state, while the BDD 
						scenario only describes the <emphasis>external</emphasis> behavior, so this information can't be recovered
						from the BDD scenario. The transition names, in contrast, can be derived from the scenario, since they 
						correspond to externally visible behavior.
           </para>            
         </step>
       </procedure>
       <para>
         Let's try this out on <xref linkend="bdd-customer-happy-path"/>:
       </para>
       <orderedlist>
         <listitem>
           <para>
             The first line of the scenario is <literal>Given a customer Chrissy</literal>, which starts with 
             <literal>Given</literal>, so we must add a state:
		        <mediaobject>
		          <imageobject>
		            <imagedata fileref="images/sd-from-bdd-1.png" scale="68" align="center"/>
		          </imageobject>
		        </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
            The next line is <literal>When she reads the menu</literal>. We must add a transition for this 
            <literal>When</literal>, and we can use the rest of the line as the input of the transition:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-2.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>And she orders a tall whole milk caffe latte</literal>. The line starts with
             <literal>And</literal>, which is shorthand for the keyword on the previous line, <literal>When</literal>.
             So we must add a transition. But since that transition must start at a state, we must first add a state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-3.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>Then she is due USD 2.75</literal>. Since this line starts with 
             <literal>Then</literal>, we must add a state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-4.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>When she pays</literal>, so we add a transition:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-5.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>Then she is handed a receipt</literal>, so we add a state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-6.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>When she takes the receipt</literal>, so we add a transition:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-7.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>Then she must wait for the barista</literal>, so we add a state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-8.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>When the barista calls her name</literal>, so we add a transition:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-9.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>Then her serving is ready</literal>, so we add a state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-10.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The next line is <literal>When she takes her serving</literal>, so we add a transition:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-11.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             The final line is <literal>Then she is happy</literal>, so we add another state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-12.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
         <listitem>
           <para>
             Now that the interaction part of the state diagram is done, we should label the states for clarity. We
             also realize that the last state added is an accepting state:
             <mediaobject>
               <imageobject>
                 <imagedata fileref="images/sd-from-bdd-13.png" scale="68" align="center"/>
               </imageobject>
             </mediaobject>
           </para>
         </listitem>
       </orderedlist>
       <para>
         At this point we have a state diagram that looks a lot like the one in 
         <xref linkend="sd-customer-happy-path"/>. The difference is that we have concrete actions labeling the 
         transitions, like <literal>She selects a tall whole milk caffe latte</literal>, rather than generic ones,
         like <literal>Place order</literal>. We can generalize transitions as we add more BDD scenarios.
       </para>
       <para>
         To get a complete state diagram, you must run this procedure on all the scenarios for the persona. After that, 
         you will often want to further tweak the state diagram to better support the non-functional requirements, 
         or to give a better developer experience.
         For instance, you may want to make the protocol less chatty by merging transitions to reduce the number of
         network round trips, so that you'll get better performance. (We'll talk more about about performance in 
         <xref linkend="performance"/>.)
       </para>
       <para>
         Before we continue our tour of the functional part of APIs in <xref linkend="design"/> and 
         <xref linkend="patterns"/>, we should look briefly at non-functional requirements.
       </para>
     </section>
  </section>

  
  <section id="non-functional-requirements">
    <title>Non-Functional Requirements</title>
    <para>
      There are many more aspects to a RESTful system other than its functionality. A non-functional requirement is an
      overall property of the system and not a specific function.
    </para>

    <para>
      Non-functional requirements are sometimes referred to as the qualities or, more informally, the ilities:
    </para>
    <simplelist type='vert' columns="3">
      <member>Accessibility</member>
      <member>Availability</member>
      <member>Confidentiality</member>
      <member>Extensibility</member>
      <member>Evolvability</member>
      <member>Integrity</member>
      <member>Interoperability</member>
      <member>Maintainability</member>
      <member>Operability</member>
      <member>Performance</member>
      <member>Portability</member>
      <member>Reliability</member>
      <member>Reusability</member>
      <member>Robustness</member>
      <member>Scalability</member>
      <member>Supportability</member>
      <member>Testability</member>
      <member>Usability</member>
      <member>etc.</member>
    </simplelist>
    <para>
      While all of these topics are important to certain degrees in all systems, not all non-functional requirements
      are equally interesting for REST APIs. Interoperability obviously is; that's what an API is all about. But 
      reusability and portability are less interesting and we won't talk about them much in this book. 
    </para>
    <para>
      We already touched upon evolvability in <xref linkend="apis"/> and we'll dive deeper into to this topic and 
      into maintainability and extensibility in <xref linkend="maintenance"/>.
      We've also taken a few steps into the field of testability, but we'll return to this important topic in 
      <xref linkend="test"/>.
      Performance and scalability are the topics of <xref linkend="performance"/>, while we'll talk more about
      operability and supportability in <xref linkend="operations"/> and about reliability and robustness in 
      <xref linkend="error"/>.
    </para>
    <para>
      Confidentiality, integrity, and availability are the basic ingredients of security, the subject of 
      <xref linkend="security"/>. Security is a vital topic for REST APIs, especially for those APIs that are open to 
      the public, so we'll touch upon it in many other chapters as well.
    </para>
    <para>
      Accessibility and usability are about how easy it is to use a system. Let's look at that in some more detail. 
    </para>
            
	  <section id="dx">
	    <title>Developer eXperience</title>
	    <para>
	      The term <firstterm>Developer eXperience</firstterm> (DX) is derived from User eXperience (UX), the art and
	      science of making a piece of software pleasant to use. REST APIs are exercised by the clients calling them, but 
	      those clients are programs that don't care about usability issues. The developers who write those clients do, 
	      however, and they are your real users.
	    </para>
	    <para>
	      Developers aren't average computer software users, however. On the one hand, they are more experienced using 
	      software and require less education and hand holding. On the other hand, they are very critical and often don't 
	      want to take the time to read through manuals. Any REST API development effort should take that into 
	      consideration and deliver a good developer experience.
	    </para>
	    <para>
	      DX encompasses various topics. The API must be well-designed, something which we'll cover in
	      <xref linkend="design"/>. One aspect of that is that the API must adhere to the <firstterm>principle of least
        astonishment</firstterm> and follow well-established patterns that other APIs use, as we'll see in
        <xref linkend="patterns"/>.
	    </para>
	    <para>
	      A developer also needs to be up and running with the API as fast as possible. The fewer roadblocks you put
	      up, the better. Don't ask a lot of questions on your signup form, and don't let developers wait a day for 
	      sending them their API key, if your service requires one. Do provide samples, but keep them short and to the
        point. We cover documentation in <xref linkend="support"/>.
	    </para>
	    <para>
	      Don't forget to give developers a convenient way to provide feedback. When they do, let them know what you have 
	      decided to do with it, and keep your word. A powerful way to collect feedback is through the use of a forum.
	      This will also enable developers to help each other, instead of having to rely on you all the time.
	      As a bonus, this helps you build a community around your API.
	    </para>
	    <para>
	      Keep in mind that developers rather do than read about doing. Provide an SDK to consume your API from their
	      favorite programming language, rather than having them select and learn an HTTP library, as we'll explain in 
	      <xref linkend="sdk"/>. This will decrease the amount of effort to get them started.
      </para>
      <para>
        Also, sample programs don't hurt. It's often easier to learn by copying something that works than to build it
        right from scratch. It makes sense to make the sample programs part of the SDK, so that they can double as
        documentation for the SDK.
      </para>
      <para>
        If you can provide client developers with a sandbox environment that they can play with before they even sign
        up for your service, that would be ideal. This could be a separate service that you make available, or it could 
        be an integrated part of the documentation.
	    </para>
	    <para>
	      Once developers start to use your API, they'll run into stumble blocks. Make sure your error reporting
	      points them into the right direction to solve their problems. <xref linkend="error"/> talks more about error
	      reporting and recovery strategies.
	    </para>
	    <para>
	      The goal of a good DX is to draw the developer in. The process starts when the developer first hears about the
	      API and continues all the way through to a successfully deployed client that uses the API. Think of it as a
	      sales funnel where there are different stages, each of which have to motivate the developer to invest more time
	      and energy to take the next step.
	    </para>
	  </section>
  </section>

  <section>
    <title>Summary</title>
    <para>
      This chapter looks at APIs from the viewpoint of the functional and non-functional requirements placed upon it.
      Functional requirements are best captured in either state diagrams or examples. State diagrams can be 
      semi-automatically derived from examples if these are specified in the Gherkin syntax used by Behavior-Driven
      Development (BDD).
    </para>
    <para>
      While functional requirements state what the system should do, non-functional requirements describe how the system
      should be. There are various non-functional requirements, including Developer eXperience (DX). The goal of DX is
      to make the API and the surrounding ecosystem as easy and pleasant to use as possible to foster adoption.
    </para>
  </section>  
</chapter>
