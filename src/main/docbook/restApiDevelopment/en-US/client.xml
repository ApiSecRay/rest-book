<chapter id="client">
  <title>REST Clients</title>
  <para>
    A <firstterm>REST client</firstterm> uses a REST API to achieve its goals by following the general flow depicted in
    <xref linkend="client-flow"/>. This model is a generalization of the traditional Web. On the web, a human user
    enters the billboard URI in the browser's address bar and chooses which links to follow.
  </para>
  <para>
    The same model can work for REST clients. The billboard URI is usually hardcoded or, better yet, read from some
    configuration source. But otherwise the process is very much the same. The client renders the server's response and
    allows the user to pick a link from it. This kind of client is known as a <firstterm>Faithful Hypermedia
    Client</firstterm> <citation>FHC</citation>.
  </para>
  <para>
    The generalized model also allows for the use case of an <firstterm>Autonomous Client</firstterm> that makes
    decisions without being directly guided by a human. In other words, the program chooses links based on criteria 
    that were coded in.
    As long as we're not talking about true Artificial Intelligence, the human guidance is still there, but it's now
    indirect, in the form of a client developer programming in goals and how to achieve them by following links.
  </para>
  <para>
    Unlike browsers, most REST clients today are specifically built to consume a single API. The main reason for that
    is that it's currently extremely difficult to write a client that can handle multiple APIs and do useful work with 
    them. There exist some browser-like clients that can consume any level 3 API (see <xref linkend="maturity"/>), but 
    they usually don't offer the kind of user experience that is expected today <citation>Siren Browser</citation>
    <citation>Hydra Console</citation>.
  </para>
  <para>
    REST clients might become more generic in the future, if more REST APIs move to level 4. It's conceivable that a
    single client could work with multiple APIs in the same domain if it's programmed to understand the semantics of
    that domain.
  </para>
  <para>
    We believe that, for the near future, dedicated REST clients will remain state of the art. This chapter
    explains how to develop such clients.
  </para>

  <section id="implement-client">
    <title>Implementing Clients</title>
    <para>
      To implement a client, we need to know how to communicate with the server. The server's API documentation should
      provide this information (see <xref linkend="support"/>). Armed with this knowledge, we can set out to implement
      the general flow of <xref linkend="client-flow"/>.
    </para>
    <para>
      Executing API requests requires using an SDK (see <xref linkend="sdk"/>) for the API. If there isn't an SDK, or
      not one for your preferred programming environment, you can use a general purpose HTTP client library like
      <citation>Apache HttpComponents</citation>.
    </para>
    <para>
      The first step is to retrieve the home resource by issuing a <literal>GET</literal> request on the billboard URI.
      This URI is one of those things that may change over time, so it should be stored in the client's configuration
      rather than hardcoded.
    </para>
    <para>
      It's likely that the service is accessible over HTTPS rather than plain HTTP. It may even support both, in which
      case you should pick the safer HTTPS option. Make sure you validate the server's certificate properly (see
      <xref linkend="cryptography"/>) and report any problems you may find with it (see <xref linkend="support"/>).
      Hopefully the SDK or HTTP library will handle the gory details for you. If not, it should have documentation on 
      how to handle TLS connections.
    </para>
    <para>
      It's also likely that your client needs to authenticate with the server. As we saw in 
      <xref linkend="authentication"/>, there is an extensible HTTP standard and additional specifications that define
      extensions like Basic and Digest authentication and OAuth2.
    </para>
    <para>
      Many HTTP client libraries will handle Basic and Digest authentication for you, while OAuth2 is usually
      implemented by specific libraries or frameworks like <citation>Spring Security OAuth</citation>. Use such
      libraries or frameworks and only create your own implementation if you absolutely have to. In that case, apply
      the <firstterm>Decorator pattern</firstterm> and wrap an authenticating client around a standard client
      <citation>GammaEtAl94</citation>.
    </para>
    <para>
      If your client requires credentials for authenticating (other than a human user's credentials), then you must
      store that securely. Don't ever store credentials in source code, because that makes the credentials hard to
      change. It's also a security risk; there have been documented cases where hackers used credentials they found in
      source code on GitHub to break into systems. 
    </para>
    <para>
      The least you can do is store the credentials in a configuration file with restrictive file permissions. You can
      also use any of the other configuration options discussed in <xref linkend="separate-config-from-code"/>, but pay 
      extra special care to securing access to the configuration.
    </para>
    <para>
      Once the client has connected to the server's billboard URI, it gets a response. This will usually be a home
      resource (see <xref linkend="home"/>). It's often useful to compare the responses the client gets from the server
      with those received by another client or with those in the documentation. This tells you whether you're using the
      HTTP library or SDK correctly. You can use any kind of client that can handle the types of requests that you have 
      to make.
    </para>
    <para>
      Browsers are unfortunately not very suitable for this purpose, since they support only the <literal>GET</literal>
      and <literal>POST</literal> methods, balk at most authentication schemes, and don't allow you to set headers.
      There are several browser plugins available, however, that let you do most or all of those things, e.g.
      <citation>Postman</citation>.
    </para>
    <para>
      Once the client has received a response from the server, it must extract data, links, and forms from it.
      This requires the client to parse the media type. For lots of media types there are libraries available that
      unmarshall the response into a programming language object.
    </para>
    <para>
      If there is no such library for the API's media type, you can probably get by with a library for a more generic
      media type. For instance, if you can't find a library that handles JSON-LD, you can use one that supports plain
      JSON.
    </para>
    <para>
      The same library that you use for unmarshalling responses into objects can usually also be used for the reverse
      process of marshalling programming language objects into requests.
    </para>
    <para>
      To make evolution of services easier, clients should follow the <firstterm>must-ignore</firstterm> rule when
      processing data and links. This means that anything that the client encounters that it doesn't understand should
      be treated as if it weren't there. See <xref linkend="maintenance"/> for more information about API evolution.
    </para>
    <para>
      The opposite of <emphasis>must-ignore</emphasis> is <firstterm>must-understand</firstterm>, where the client
      must raise an error and stop processing when it encounters something it doesn't understand. There is definitely
      a place for <emphasis>must-understand</emphasis>, but in RESTful systems we try to minimize it as much as
      possible because it is a form of tight coupling between client and server.
    </para>
    <para>
      Faithful Hypermedia Clients will render the response and let the user pick a link. The links in the home
      resource are usually rendered as a menu of choices that the user can select from. A link may also be rendered as 
      a button or other UI widget. For media types that don't support forms, like HAL, a link may also be rendered as a 
      form. How the FHC will render a link depends on its understanding of it, as programmed in by the client developer.
    </para>
    <para>
      Autonomous Clients select a link by themselves based on some criteria that were coded in by the client developer.
      They may or may not render responses along the way, for instance in the form of log records of what they
      did. Such renderings are usually not interactive, since by definition Autonomous Clients require no human
      interaction to reach their goals.
    </para>
    <para>
      Following a link means issuing a new HTTP request. This means selecting a new HTTP method and URI, and optionally
      URI query string parameters and method body. For a level 3b API, all this information will be in the
      response, and the client can simply retrieve this information. For a lower-level API, this information must be 
      programmed in based on an understanding of the current state and the link relation to follow.
    </para>
    <para>
      For truly RESTful APIs, i.e. level 3a and above, the new URI will be in the response. Actually, the response will 
      contain a <firstterm>URI reference</firstterm> rather than a URI <citation>RFC 3986</citation>. When servers make
      reference to a URI in a response, they do not always use the full or <firstterm>absolute URI</firstterm>. Many 
      servers return an abbreviation of a URI known as a <firstterm>relative URI</firstterm>.
    </para>
    <para>
      A relative URI doesn't contain the <firstterm>scheme</firstterm> of a URI. For instance, the scheme of the URI
      <literal>http://www.example.com/foo/</literal> is <literal>http</literal>. An example of a relative URI is
      <literal>/bar/</literal>. A relative URI takes advantage of the hierarchical syntax of URIs to express a URI
      reference relative to the name space of another hierarchical URI.
    </para>
    <para>
      A relative URI can only be turned into an absolute URI by <firstterm>resolving</firstterm> it against another
      absolute URI known as the <firstterm>base URI</firstterm>. The resolution algorithm has some tricky edge cases
      that are hard to get right. Luckily, most programming languages have libraries that implement this algorithm.
      In Java, for instance, resolving URIs works like this: 
    </para>
    <programlisting>import java.net.URI;

URI baseUri = URI.create("http://www.example.com/foo/bar/");
URI resolvedUri = baseUri.resolve("baz/");
assert URI.create("http://www.example.com/foo/bar/baz/")
    .equals(resolvedUri);</programlisting>
    <para>
      The client should use existing facilities for URI resolution rather than attempting its own implementation, 
      because there is a considerable chance that you will get it wrong. For instance, compare the previous example
      with the following:
    </para>
    <programlisting>URI baseUri = URI.create("http://www.example.com/foo/bar");
URI resolvedUri = baseUri.resolve("baz/");
assert URI.create("http://www.example.com/foo/baz/")
    .equals(resolvedUri);</programlisting>
    <para>
      As an aside, this subtle difference is why we recommended always ending URIs in slashes in side bar
      "<xref linkend="uris"/>" in <xref linkend="name-resources"/>.
    </para>
    <para>
      Sometimes the server doesn't have enough information to present the full URI for a link. For instance, the server
      can't provide a link for every term the client might want to search on. In those cases, the server will return
      a URI template rather than a URI or URI reference <citation>URI Template</citation>. The client has to resolve 
      (TODO: is that the correct term?) the URI template into a URI by filling in values for URI template parameters.
    </para>
    <!-- TODO: Show example of resolving a URI template into a URI. -->
    <para>
      The media type may indicate when a URI template is returned rather than a URI. For instance, HAL uses the
      <literal>templated</literal> boolean property on link objects for this purpose. In other cases, the client is
      supposed to know from the documentation of the media type or link relation that it has to deal with a URI
      template.
    </para>
    <para>
      As the client continues getting responses from the server and following link relations, it will usually have to
      build up some internal state to help it along the path to achieving its goal. This is especially true for
      Autonomous Clients.
    </para>
    <para>
      This internal state is known as application state to distinguish it from resource state maintained by the server,
      as we saw in <xref linkend="rest"/>. Application state is built up from the hypermedia responses the client
      receives from the server, a phenomenon known as Hypermedia As The Engine Of Application State (HATEAOS).
    </para>
    <para>
      There are various ways to store application state, such as in RAM, in a database, etc. Which method is appropriate
      depends on the situation, but quite often the client can simply maintain data structures in RAM. If you don't
      have any specific requirements about picking up where you left off in a previous session, you should default to
      simply storing state in memory.
    </para>
    <para>
      During the course of a session, the client may have to visit the same resource repeatedly, like the home resource.
      In those situations it may pay to use client-side caching, as discussed in <xref linkend="caching"/>. Many HTTP 
      client libraries implement caching, so if the server follows the standard HTTP caching mechanisms, then you may
      get all this for free. For example, here's how to set up caching with Apache HttpComponents:
    </para>
    <programlisting>CacheConfig cacheConfig = CacheConfig.custom()
    .setMaxCacheEntries(1000)
    .setMaxObjectSize(8192)
    .build();
RequestConfig requestConfig = RequestConfig.custom()
    .setConnectTimeout(30000)
    .setSocketTimeout(30000)
    .build();
CloseableHttpClient client = CachingHttpClients.custom()
    .setCacheConfig(cacheConfig)
    .setDefaultRequestConfig(requestConfig)
    .build();</programlisting>
    <para>
      The caching client is a drop-in replacement for a regular HTTP client, thanks to the Decorator pattern. If your
      client doesn't provide caching and you're forced to implement it yourself, then you should use the same approach.
    </para>
    <para>
      Most HTTP libraries will be able to recover from certain errors automatically. For instance, if a network error
      occurs for an idempotent HTTP method (see the sidebar "<xref linkend="http-methods"/>" in
      <xref linkend="maturity"/>), the library may safely retry the request. But you will need to handle most errors 
      yourself.
    </para>
    <para>
      The API documentation will tell you what errors to expect, and you should be prepared to handle them. Hopefully
      the documentation will give hints on how to recover from those errors as well.
    </para>
    <para>
      The best way to handle errors is to have a central location where they are processed, just as we recommended for
      the server. If your HTTP library has a facility for plugging in a generic error handler for all requests, then
      that's a good place. If not, catch any errors and route them into a central handler yourself. The Decorator
      pattern may be helpful yet again here.
    </para>
    <!-- TODO: Give example of error handling with Apache HttpComponents. -->
    <para>
      A client should always log any errors it encounters. The logs can be used to discover design flaws and
      implementation bugs in the client and aid in correcting them. You may go a step further and log all requests, so
      that they can also useful in debugging performance and scalability issues.
    </para>
    <para>
      A special case is <literal>400 Bad Request</literal>. For an Autonomous Client, this is a logic error and should
      definitely be logged. For Faithful Hypermedia Clients, however, the error is likely caused by a human entering
      invalid data into a form. In that case, logging the error may not be all that helpful.
    </para>
    <para>
      Make sure the client can handle any error, not just the documented ones. You never know when the server is
      updated, and when (not if) that happens, you don't want to have to rush out a new version of the client to
      replace the old broken one.
    </para>
    <para>
      An additional reason to be prepared for more than is documented is that the status code may come from an 
      intermediary component like a load balancer or caching proxy. These can return 408, 502, 504, or 511 without the
      request even reaching the API server.
    </para>
    <para>
      The HTTP specification clearly states that a client must be able to handle any status code
      <citation>HTTP</citation>. It doesn't have to understand all of them, but it must understand all
      <emphasis>classes</emphasis> of status codes. Remember from <xref linkend="status-codes"/> that the class is
      indicated by the first digit of the code. So if you run into something exotic like <literal>482</literal> (which
      isn't currently defined), you must treat it as you would a <literal>400</literal> status code.
    </para>
    <para>
      For more information on building REST clients, see <citation>Amundsen15</citation>.
    </para>
  </section>

  <section id="resilience">
    <title>Resilience</title>
    <para>
      An important non-functional requirement is resiliency, the ability to continue to function in the face of
      errors. In a loosely coupled system such as one based on the REST architectural pattern, the client should assume 
      as little about the server as it can get away with. It shouldn't even assume that the server is always going to
      be available.
    </para>
    <para>
      The client's options are of course limited when the server isn't available, but one thing it definitely must 
      <emphasis>not</emphasis> do is crash. Imagine your browser crashing everytime you tried to access a non-existing
      URL! A client should be able to degrade functionality gracefully when the server doesn't respond at all, or when 
      it responds in erroneous or unexpected ways.
    </para>
    <para>
      One pattern that helps to solve this problem is the <firstterm>circuit breaker</firstterm>
      <citation>Nygard07</citation>. The basic idea behind the circuit breaker is to wrap an external call in a 
      circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit 
      breaker closes, and all further calls to the circuit breaker return with an error, without the external call being 
      made at all. You will want to log and monitor it when a circuit breaker closes (see <xref linkend="logging"/>).
    </para>
    <para>
      A closed circuit breaker won't make external calls at first, but after a while it should try one again. If that
      works, the breaker may return itself to the open state. If it still fails, the breaker remains closed.
    </para>
    <para>
      The circuit breaker pattern reduces the load on the troubled server. If the server's troubles were caused by an
      inability to scale to the current load, than reducing the load may be enough to let it recover. If there's
      something more perminent going wrong, then at least reducing calls to it will help prevent the log files from
      overflowing.
    </para>
    <para>
      The circuit breaker pattern also helps the client. There is no point in repeatedly waiting for a non-responsive
      server. It's much better to fail fast. This is especially important in a microservices architecture, where the
      client may be the server to another client. In such a situation, any delays introduced because of one 
      malfunctioning server may ripple through to many dependent services, taking out the entire cluster of services.
      Circuit breakers limit the total amount of damage.
    </para>
    <para>
      When the circuit breaker is closed the client should provide <firstterm>graceful degradation</firstterm> of its 
      service using a <firstterm>fallback method</firstterm>. There are a couple of options, that may or may not make
      sense for a given situation:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Return an error. This makes sense for a Faithful Hypermedia Client, but not so much for an Autonomous Client.
          The client lets the user figure out how to proceed. This is often an unsatifactory approach for the user,
          because there is no recovery option offered and the user may not understand the underlying problem. User
          eXperience experts sometimes call this approach <firstterm>passing the buck</firstterm> and generally warn
          against it.
        </para>
      </listitem>
      <listitem>
        <para>
          If the operation was to look up or calculate an answer, the client might opt to return a default answer. This
          could be a static value that the client developer programs in, or it could be a cached value from a similar
          previous call. In many cases it is perfectly fine to show old data, but in some specific cases it may be
          disastrous, so carefully consider your situation.
        </para>
      </listitem>
      <listitem>
        <para>
          The client might use an alternative route to get at the same answer. There may be several different servers
          that provide basically the same service, for instance, in which case the client can switch from the preferred
          provider to an alternative one.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      When implementing these options, it helps to use the Command pattern <citation>GammaEtAl94</citation>. The code
      that makes the HTTP request is wrapped in a Command object that contains all the information needed to make the
      request. This Command object can be wrapped with a recovery object using the Decorator pattern. The recovery
      object then handles the fallback or alternative command.
    </para>
    <para>
      TODO: command pattern, Hystrix
    </para>
  </section>  

  <section>
    <title>Summary</title>
    <para>
      This chapter describes the documentation needed to build a REST client, whether that be a Faithful Hypermedia
      Client or an Autonomous Client. We also looked at some general guidelines for implementing REST clients.
    </para>
  </section>
</chapter>
