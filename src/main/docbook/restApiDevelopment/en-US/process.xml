<chapter>
  <title>RESTBucks</title>
  
  <section>
    <title>Introducing RESTBucks</title>
    <para>
      The previous chapter was a bit theoretical in nature. We needed that theory as a foundation on which to build the
      rest of the book. From now on, we will be more hands on. We want to show you how to build a REST API in all 
      the gory details.
    </para>
    <para>
       We can only do that by showing you an example that is simple enough to understand that we won't waste too much
       time explaining it, but also rich enough to show you the various subtleties that invariably sneak in when
       building a REST API. We'll follow the leads of <citation>Hohpe04</citation> and <citation>Webber10</citation> 
       and pretend we are working for a company called RESTBucks.
    </para>
    <para>
      RESTBucks is a coffee shop modeled after the omnipresent Starbucks. As you probably know, establishments like
      RESTBucks assign different roles to their employees to make sure they can serve as many customers as possible.
      A <firstterm>cashier</firstterm> takes orders and payments from a customer, while a <firstterm>barista</firstterm> 
      prepares the order. A <firstterm>manager</firstterm> is in charge of a smooth organization, and a 
      <firstterm>supplier</firstterm> provides the ingredients necessary to fulfill the orders.
    </para>
    <para>
      In this book we'll replace those humans (including the customers) with computer programs. Each program is a 
      service that offers a REST API and that may use the REST APIs of other services.
    </para>
    <para>
      REST APIs make sense in this context, since the RESTBucks service needs to scale up quickly when demand peaks.
      At the same time, we also need to continuously improve and expand our offerings to keep attracting new
      customers, so evolvability is also a concern.
    </para>
  </section>
  
  <section>
    <title>Software Development Approach</title>
    <para>
      Before we get started building the RESTBucks API, we need to establish how we're going to organize this
      software development effort.
    </para>
    <para>
      There are many software development methodologies, and we don't necessarily want to promote any particular one in 
      this book. Don't get us wrong, we certainly have our preferences, but we believe you can successfully build a 
      REST API with any software development method.
    </para>
    <para>
      We're going to follow the Waterfall method <citation>Royce75</citation> here. Remember, we didn't pick this 
      method because we believe it is superior to other methods. But it is extremely well-known, and cleanly separates 
      the process into neat phases that are easy to follow. We understand that in practice these phases blend into each 
      other, but in this book we can give them focused treatment in different chapters.
    </para>
    <para>
      We believe that more Agile methods in general work better than more traditional Waterfall-like methods, but 
      for the most part we'll ignore that in this book. The exception is that we will present some Agile practices that 
      we think add specific value for building REST APIs. You are, of course, free to use these practices or ignore 
      them. We'll try to make sure you'll get value out of this book either way.
    </para>
    <para>
      We'll sometimes use an term from Agile methods, like <firstterm>Product Owner</firstterm>. We'll only do that in 
      the context of a specific Agile practice, like in <xref linkend="bdd"/>. This doesn't necessarily mean you can 
      only use that practice if you completely adopt an Agile method. There is usually a different term used for the
      same concept in other methods, but it seems more natural to use Agile terminology when we talk about Agile
      practices. Again, we won't do that too often.
    </para>
    <para>
      REST APIs lend themselves well to incremental and iterative development. Client and server teams can
      work in parallel during an iteration and the API can grow by increments between iterations. We will not assume
      an incremental and iterative software development process in this book, but we do recommend it. If you build up
      your API over time, you can simply follow the chapters in this book within a single iteration.
    </para>
    <para>
      We grant ourselves the luxury to start from scratch with RESTBuck, because we think that makes the text easier to
      follow. You may not be so lucky and may have to work with legacy code. Even in greenfield projects you may be 
      restricted because you have to work from existing industry standards.
    </para>
    <para>
      While these constraints may limit what you can do, the essence of building a REST API remains the same. We are 
      confident that the techniques presented in the following chapters will work for you as well, although it may 
      sometimes require a bit of creativity. We'll talk specifically about the differences between starting with design
      versus starting with code in <xref linkend="tools"/>.
    </para>
    <para>
      With all these preliminaries out the the way, let's get started serving our customers some hot beverages.
    </para>
  </section>
  
  <section>
    <title>Summary</title>
    <para>
      This chapter establishes the context for our journey through REST land. We'll build a company called RESTBucks
      that serves virtual coffee via REST APIs. 
    </para>
    <para>
      This book will present REST API development according to the phases of the well-known Waterfall model, because
      we think that makes the text easiest to follow.
    </para>
  </section>
  
</chapter>
