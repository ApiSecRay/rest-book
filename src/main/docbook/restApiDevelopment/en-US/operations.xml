<chapter id="operations">
  <title>Operations</title>
  <para>
    TODO: Operability
  </para>
  
  <section>
    <title>Separating Configuration From Code</title>
  </section>
  
  <section id="logging">
    <title>Logging and Monitoring</title>
    <para>KPIs</para>
    <para>Correlating business processes with fine-grained messages</para>
  </section>
  
  <section>
    <title>Security</title>
    <para>
      We discussed vulnerabilities in some detail in <xref linkend="security"/>, but there is an operational side to 
      them as well that we should look at.
    </para>

    <section id="alerting">
      <title>Alerting</title>
    </section> 

    <section>
      <title>Vulnerability Disclosure</title>
		  <para>
		    Vulnerabilities may be known or unknown. The latter are called <firstterm>zero-day</firstterm> vulnerabilities,
		    because we start counting days when we first become aware of a vulnerability. There is a lively black market 
		    for zero days. To counterbalance that, more and more companies have started <firstterm>bug bounty 
		    programs</firstterm>, where they pay people who report vulnerabilities to them, so they can fix them before
		    they are exploited.
		  </para>
		  <para>
		    Vulnerabilities may be discovered by criminals or other malicious agents, by <firstterm>security
		    researchers</firstterm>, by users of the API, or by the provider of the API itself. Security researches and 
		    users will generally report them to the provider so they can be fixed. Some security researchers give the
		    provider some time to fix vulnerabilities, after which they will <firstterm>disclose</firstterm> them. This 
		    means that they publicize their results, which usually contains a proof of concept that shows how to exploit
		    the vulnerability.
		  </para>
		  <para>
		    There is a strong debate about vulnerability disclosure. At one extreme, some researchers disclose anything
		    they find immediately. This means that the vulnerabilities can now be exploited, and users are at risk.
		    For this very reason, other people prefer to keep the vulnerabilities a secret until a fix is available. The
		    middle ground is taken by people who will give providers a certain amount of time, say 90 days, after which
		    they will disclose.
		  </para>
		  <para>
		    At the very least, you should offer a way for people to report vulnerabilities. If you don't you risk that
		    any vulnerabilities that are found are made public before you get a chance to protect your customers' data.
		    Our advice is to follow the convention of setting up an email address named 
		    <literal>security@yourcompany.com</literal> where vulnerabilities can be reported. Always thank anyone
		    using that email address for helping you out, and work closely with them to reproduce and fix the issue.
		  </para>
		  <para>
		    You should add a section to your website that describes in detail how you would like to see vulnerabilities 
		    reported. This should obviously include the security email address, but also very specific instructions on what 
		    information you want to receive and in what form.
		  </para>
		  <para>
		    You can also start your own bug bounty program. This may or may not make sense for your API, depending on a lot 
		    of factors such as how widely your API is used and how valuable the data is that flows through it.
		  </para>
    </section>
  </section>
  
  <section id="support">
    <title>Support</title>
  </section>
  
  <section>
    <title>Summary</title>
  </section>
</chapter>
