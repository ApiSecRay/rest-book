<chapter>
  <title>Introduction</title>

  <section id="apis">
    <title>Application Programming Interfaces (APIs)</title>
    <para>
      Our society depends more and more on software. Some people even claim that in today's world every company is a 
      software company.
      At the same time, the number of ways people use software is increasing. The traditional mainframe (1st platform) 
      and client/sever (2nd platform) applications are now flanked by applications running in browsers, on mobile 
      phones and tablets, in game consoles, in cars, etc. (3rd platform).
    </para>
    <figure id="3rd-platform">
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/3rd-platform.png" width="15cm"/>
        </imageobject>
      </mediaobject>
      <title>Evolution of computing platforms</title>
    </figure>
    <para>
      Customers have different consumption preferences that also change depending on where they are, who they are with, 
      and what time of day it is. But in all that change they expect their data to be constantly available, no matter
      what.
    </para>
    <para>
      To make that possible, we must break up our applications into <firstterm>modules</firstterm>. At the very least, 
      we need a <firstterm>server</firstterm> that stores the data and multiple <firstterm>clients</firstterm> that 
      live on the different devices.
      The kinds of conversations possible between the many clients and the one server are determined by the 
      capabilities of the latter. We call this language the <firstterm>Application Programming Interface</firstterm>, 
      or API.
    </para>
    <para>
      The breakdown in server and clients is the minimum we can get away with, but further dividing up modules may
      have additional advantages. Each module can be scaled independently of the others, can be built using the most
      effective and efficient technology, can be maintained by a dedicated team, etc. These advantages have led to a 
      movement to break up servers into <firstterm>microservices</firstterm>. Microservices also communicate with each 
      other and thus also expose APIs.
    </para>
    <para>
      A single company may be responsible for both the producer and consumer of an API, as with most microservices.
      However, an API may also be publicly available to others. Public APIs allow third parties to unleash 
      their creativity in ways the providers could never have imagined. The API allows provider and consumer to 
      innovate independently.
    </para>
    <para>
      Companies like eBay, Amazon, Salesforce, Google, and Twitter provide valuable services via APIs, and software 
      developers are using those APIs to create new kinds of applications that run on a variety of devices.
      These services are valuable enough that API consumers are willing to pay for them.
      We now live in the <firstterm>API Economy</firstterm>.
    </para>
    <para>
      With a public API, providers may have little knowledge of the clients that use them, but they need to ensure 
      that these clients can continue to function as they evolve their servers. At the same time, API providers may 
      need to support large numbers of users, so their APIs must scale well. Providers must thus design their APIs to 
      simultaneously support evolvability and scalablility in their distributed systems. That is not an easy task.
    </para>
    <para>
      Fortunately, this is precisely the problem that the REST architectural style was designed to solve.
    </para>
  </section>

  <section>
    <title>Representational State Transfer (REST)</title>
    <para>
      This section introduces the theory behind the REST architectural style. This is where we define our terms and
      lay the foundation for the more practical remainder of the book.
    </para>
    
    <section id="rest">
      <title>What is REST?</title>
      <para>
        REST is an architectural style, modeled after the World Wide Web. It is formally defined in Roy Fielding's 
        thesis <citation>Fielding00</citation> by the following six constraints:
        <orderedlist>
          <listitem>Client/Server</listitem>
          <listitem>Stateless</listitem>
          <listitem>Cache</listitem>
          <listitem>Uniform interface</listitem>
          <listitem>Layered system</listitem>
          <listitem>Code-on-demand (optional)</listitem>
        </orderedlist>
      </para>
      <para>
        The <emphasis>client/server constraint</emphasis> demands that we divide our system in multiple modules, since 
        monolithic applications are confined to the limits of a single machine and thus cannot scale arbitrarily.
        As we've already seem, each module can be further divided as needed. 
        For instance, the client can be a browser and the server a web application. We can then further divide the 
        web application into a web server for the CPU-intensive processing and a database server for I/O-intensive 
        processing. Distributing capabilities over multiple modules provides us with the opportunity to give each the 
        resources it needs, without wasting money by giving it too much.
      </para>
      <para>
        The <emphasis>layered system constraint</emphasis> additionally requires that the client cannot see beyond its 
        immediate server. This allows us to change our server landscape without breaking the client. We could, for 
        example, insert proxy servers to aid with scaling, or we could break a microservice out of the monolithic server.
      </para>
      <para>
        We can further improve scalability by moving some of the load from the server to the client. The
        <emphasis>stateless constraint</emphasis> moves the responsibility for maintaining some data to the client so 
        that the server no longer needs to worry about it. We can't just move any data to the client, however, since 
        certain data needs to be available from multiple clients and between client sessions. We call that data
        <firstterm>resource state</firstterm>. But there is other data associated with the path the client has taken
        in pursuit of its goal. We call this data <firstterm>application state</firstterm>. The stateless constraint
        deals only with application state.
      </para>
      <para>
        The <emphasis>code-on-demand constraint</emphasis> additionally pushes processing to the client. We see this 
        when web servers send JavaScript to the browser for local execution. This optional constraint is very common on 
        the Web, but mostly absent from REST APIs.
      </para>
      <para>
        The <emphasis>cache constraint</emphasis> also helps with scalability. The server indicates how long data that 
        it sends is valid, so that the client does not have to keep asking for it. If clients do so anyway, the layered 
        system constraint allows us to insert caching proxy servers to keep our servers available for useful work.
      </para>
      <para>
        The <emphasis>uniform interface constraint</emphasis> is the one that really distinguishes REST from other 
        approaches. It mandates that we stick to a predefined set of standard operations. Anybody who has played with 
        Legos knows the power of a universal interface. Since the uniform interface is so central to REST, we will now 
        look into it in more detail.
      </para>
    </section>
    
    <section id="uniform-interface">
      <title>The Essence of REST: Hypermedia</title>
      <para>
        The uniform interface is enabled by the following mechanisms:
      </para>
      <variablelist>
        <varlistentry>
          <term>Identification of resources</term>
          <listitem>
            <para>
              <blockquote>
                <attribution>Roy Fielding <citation>Fielding00</citation></attribution>
                <para>
                  The key abstraction of information in REST is a <firstterm>resource</firstterm>. Any information that 
                  can be named can be a resource: a document or image, a temporal service (e.g. "today's weather in 
                  Los Angeles"), a collection of other resources, a non-virtual object (e.g. a person), and so on.
                </para>
              </blockquote>
              We name things to be able to talk about them easily and we should do the same with resources. In
              practice, we use <firstterm>Uniform Resource Identifiers</firstterm> <citation>RFC 3986</citation>
              for this purpose.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Manipulation of resources through representations</term>
          <listitem>
            <para>
              A resource is a conceptual entity, an idea. To interact with it, we need something more concrete.
              <blockquote>
                <attribution>Roy Fielding <citation>Fielding00</citation></attribution>
                <para>
                  A <firstterm>representation</firstterm> is a sequence of bytes, plus representation metadata to 
                  describe those bytes. Other commonly used but less precise names for a representation include: 
                  document, file, and HTTP message entity, instance, or variant.
                </para>
              </blockquote>
              A representation of a resource is an encoding of the information contained in the resource. It allows us
              to transmit the information from client to server and vice versa. The data format of a representation is 
              known as its <firstterm>media type</firstterm> <citation>RFC 2048</citation>.
            </para>
            <para>
              Next to the data of the resource itself, a representation may also contain
              <firstterm>meta-data</firstterm>: data about the data. For example, we could specify when the data was 
              last updated.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Self-descriptive messages</term>
          <listitem>
            <para>
              To implement the stateless constraint, it's important that the server doesn't need to remember
              application state. A clients that wants the server to do something on its behalf must therefore give the
              server all the information it needs to do its job. In other words, the message that the client sends to 
              the server must be self-contained and self-descriptive, because the server has no memory of previous
              interactions beyond the resource state it stores.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Hypermedia as the engine of application state (HATEOAS)</term>
          <listitem>
            <para>
              Sending isolated messages doesn't get us very far because we often need to refer to other resources in a 
              message to make it self-descriptive. We've already seen that we use resource identifiers like URIs to 
              refer to other resources. When we including a URI in a message, we effectively add a 
              <firstterm>hyperlink</firstterm> to that resource, and therefore we speak of a 
              <firstterm>hypermedia</firstterm> message.
            </para>
            <para>
              Hyperlinks allow the server to guide the client in its next possible moves. The client selects from this
              "menu" of choices whatever gets it closer to its goal. The links thus act as road signs directing
              the client while it's building up its application state. This is what is meant by the somewhat 
              enigmatic term HATEOAS.
            </para>
            <para>
              For this scheme to work, the client has to be able to understand and differentiate between the provided 
              links. The mechanism that powers that is the <firstterm>link relation</firstterm>. Link relations can be
              explicit, like in this piece of HTML:
              <code>&lt;link rel="stylesheet" type="text/css" href="foo.css"/></code>, where the <literal>rel</literal>
              attribute contains the link relation. Link relations can also be implicit, like in this piece of HTML:
              <code>&lt;script type="text/javascript" src="bar.js"></code>, where the <literal>script</literal> element
              defines the link relation. 
            </para>
            <para>
              When a client is purely guided by the "menu" of choices the server provides through its links, it no 
              longer needs to know about the URIs maintained by the server. It knows how to discover the URIs from the 
              links via link relations. In the examples above, the URIs can be found in the 
              <literal>href</literal> attribute of the <literal>link</literal> element and the <literal>src</literal>
              attribute of the <literal>script</literal> element. The only thing that is needed is a single URI to
              bootstrap the whole process. Mike Amundsen calls this URI the <firstterm>billboard URI</firstterm>, 
              because it's what you would put on a billboard if you were advertising for your service.
              The client sends a message to the billboard URI and receives a response with links (typed by link 
              relations) from where it can start its journey through the API.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    
    <section id="maturity">
      <title>REST Maturity</title>
      <para>
        The REST architectural style was defined in a PhD thesis, and as such it is both abstract and generic.
        Unfortunately, that has led to some confusion of how to apply the constraints concretely in software development 
        projects. The HATEOAS part in particular has proven difficult to digest. The end result is that there are now 
        published APIs that call themselves RESTful, but adhere to the REST constraints with varying levels of 
        strictness.
      </para>
      <para>
        Some people seem to think that if your API is accessible over HTTP, then it must be a REST API. In fact, none 
        of the REST constraints mention HTTP (or any other communication protocol, for that matter). They deal with
        self-descriptive, hyperlinked messages, but not with the mode of transport of these messages. While today HTTP
        is the default choice, it helps to remember that there is nothing inherently HTTP-ish about REST. Some people
        try to make a distinction by calling services that are accessed over HTTP <firstterm>web services</firstterm>.
      </para>
      <para>
        In 2008, Leonard Richardson published his Maturity Heuristic <citation>Richardson08</citation> that classified 
        web services into three levels based on their use of URI, HTTP, and hypermedia. As is common with maturity 
        models, the levels build on each other.
      </para>
      <figure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/maturity.png" width="10cm" align="center"/>
          </imageobject>
        </mediaobject>
        <title>Richardson's REST Maturity Model</title>
      </figure>
      <para>
        Let's look at each of the levels in detail.
      </para>
      <variablelist>
        <varlistentry>
          <term>Level 0</term>
          <listitem>
            <para>
              The API offers one resource, i.e. one URI, and one HTTP method to send messages to it.
            </para>
            <para>
              This is the domain of XML-RPC <citation>XML-RPC</citation> and SOAP <citation>SOAP</citation>, where the 
              operations to perform are either encoded into the URI or into the message. 
              Since there is only one URI in the entire service, it is impossible to use bookmarks.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Level 1</term>
          <listitem>
            <para>
              The API offers more than one resource, at different URIs, but still uses only one HTTP method, usually
              either <literal>GET</literal> or <literal>POST</literal>.
            </para>
            <para>
              Since there are multiple resources, we can actually bookmark them. But we could also modify them with the 
              <literal>GET</literal> HTTP method, even though that is supposed to be safe, thereby breaking caching.
              (See the sidebar "<xref linkend="http-methods"/>" for the definition of "safe").
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Level 2</term>
          <listitem>
            <para>
              The API offers more than one resource, at different URIs, and correctly uses the HTTP methods.
            </para>
            <para>
              This is the domain of so-called "pragmatic REST". Although this is a vast improvement over level 1,
              we're still basically inventing a new protocol for every new service: a client must learn about all the
              different URIs and what methods they support, rather than following a menu of choices presented by the 
              server.
            </para>
            <para>
              We dislike the term “pragmatic REST”, as it’s a cheap rhetoric trick to put opponents (“dogmatists”)
              on the defensive without having to provide good arguments.
              More importantly, it creates semantic diffusion: "pragmatic REST" is not actually REST according to 
              Fielding's definition, and shouldn't be called such. Using the same term for different things is bound to
              cause misunderstandings.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Level 3</term>
          <listitem>
            <para>
              The API's resources describe their capabilities using hypermedia. This is where truely RESTful APIs
              live.
            </para>
            <para>
              The difference between plain media types, like <literal>image/jpeg</literal>, and hypermedia types, like 
              <literal>text/html</literal>, is of course the “hyper” part. Links allow a client to discover 
              functionality without being coupled to the server’s URI structure, as we saw in 
              <xref linkend="uniform-interface"/>.
            </para>
            <para>
              There is more to hypermedia than links, however. Richardson points out that two technologies are required
              at this level: URIs to implement the links, and <firstterm>forms</firstterm> to tell the client how to
              follow those links. For instance, we still need to know what HTTP method to use to send a message to the
              URI. We may assume <literal>GET</literal> as the default, but we also need a way to specify deviations 
              from the default.
            </para>
            <para>
              There are different form technologies, like HTML Forms, URI Templates <citation>RFC 6570</citation>, 
              and XForms. Which one to use doesn't matter much for this discussion, as long as the media type is able 
              to express forms.
            </para>
            <para>
              Since some media types stop short at links and forget about forms, we think it makes sense to split this 
              level into 3a and 3b. At level 3a, a media type is used that supports links, but not forms. At level 3b, 
              forms are also supported. We'll talk more about hypermedia types in <xref linkend="media-types"/>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>      
      
      <sidebar id="http-methods">
        <title>HTTP Methods</title>
        <para>
          The HTTP specification <citation>HTTP</citation> defines a small number of methods: <literal>GET</literal>,
          <literal>HEAD</literal>, <literal>POST</literal>, <literal>PUT</literal>, <literal>DELETE</literal>,
          <literal>CONNECT</literal>, <literal>OPTIONS</literal>, and <literal>TRACE</literal>.
          The <literal>PATCH</literal> method was added later <citation>RFC 5789</citation>.
        </para>
        <para>
          These methods all have very precisely defined semantics. The constraints thus imposed make it possible to
          optimize their use. For instance, we know that a <literal>GET</literal> method should never change the
          resource to which it is sent, so we can cache the response and use the cached representation on the next
          call to save us a network round trip.
          A couple of properties of the HTTP methods are crucial to understand when building REST APIs:
        </para>
        <variablelist>
          <varlistentry>
            <term>Safe</term>
            <listitem>
              <blockquote>
                <attribution><citation>HTTP</citation></attribution>
                <para>
                  Request methods are considered "safe" if their defined semantics are essentially read-only; i.e., the 
                  client does not request, and does not expect, any state change on the origin server as a result of
                  applying a safe method to a target resource.
                </para>
              </blockquote>
              <para>
                The following methods are safe: <literal>GET</literal>, <literal>HEAD</literal>,
                <literal>CONNECT</literal>, and <literal>TRACE</literal>.
              </para>
              <para>
                The biggest advantage of safe methods is that they allow caching, since they're guaranteed not to
                change the resource.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Idempotent</term>
            <listitem>
              <blockquote>
                <attribution><citation>HTTP</citation></attribution>
                <para>
                  A request method is considered "idempotent" if the intended effect on the server of multiple identical 
                  requests with that method is the same as the effect for a single such request.
                </para>
              </blockquote>
              <para>
                Safe methods are idempotent, as are the <literal>PUT</literal> and <literal>DELETE</literal> methods.
              </para>
              <para>
                Idempotent methods can be safely repeated. Suppose we send a <literal>DELETE</literal> request and the
                network connection drops before we receive the response. We now don't know for sure that the resource
                was really deleted. Since the <literal>DELETE</literal> method is idempotent, we can safely repeat the
                request. If the resource was deleted, nothing furter will happen. If it wasn't, it will be deleted
                after all. Either way, we end up in the desired state.
              </para>
              <para>
                No such guarantees are available for methods that are not idempotent: <literal>POST</literal> and
                <literal>PATCH</literal>. For example, if we try to create a resource with <literal>POST</literal>, 
                and the connection drops before we receive the response, we can't retry, or we may end up with two 
                created resources instead of one.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sidebar>
      
      <para>
        The amount of out-of-band communication steadily decreases as we move up the levels. This is a
        good thing, as it reduces the amount of coupling between clients and servers. It also makes clients
        easier to build, since we have to encode less knowledge into them.
      </para>
      <para>
        We believe that level 3 isn’t the final destination, however. Even with the inclusion in the message of things 
        like what method and protocol to use to follow a link, and what media type to encode the request in, we still 
        need some out-of-band communication. Which links to follow is based on the client's goal and what the data items
        and link relations of the links in the message <emphasis>mean</emphasis>.
      </para>
      <para>
        A REST client driven by a human user can navigate a level 3 API, since it can present the data items and link 
        relations in its user interface and let the user select the next link. But for true 
        <firstterm>machine-to-machine</firstterm> (M2M) communication we need something more: semantics. The client 
        needs to <emphasis>understand</emphasis> what to do without a human directing it.
      </para>
      <para>
        One way of making the client understand the semantics of the messages is to program that knowledge directly 
        into the client. This is what most people currently do. The downside of this approach is that it's not very
        efficient. Every service requires a new client to be written, and almost all changes in the service require
        an update of the client.
      </para>
      <para>
        The alternative is to write a client that can reason from known semantics. 
        There is a big effort under way to teach semantics to machines <citation>Semantic Web</citation>.
        Semantic Web technology involves relating disparate pieces of data, assigning meaning to data using 
        vocabularies, and querying and reasoning about data based on its meaning.
      </para>
      <para>
        For example, Gmail can understand that a particular email is actually a flight confirmation from an airline
        if the email refers to a certain vocabulary. Based on that understanding, Gmail is able to automatically put 
        the flight on your Google calendar and to display a check-in button alongside the text of the email.
        We'll talk more about semantics in <xref linkend="semantics"/>.
      </para>
      <para>
        Some media types have specific facilities for adding in semantics. For instance, HTML offers the 
        <literal>class</literal> attribute on many elements that can be used to refer to a vocabulary term.
        This allows for different styling of those elements using CSS, for instance, based on their meaning. For 
        media types that don't have such facilities, semantic <firstterm>profiles</firstterm> allow us to add meaning 
        to our messages.
      </para>
      <blockquote>
        <attribution><citation>RFC 6906</citation></attribution>
        <para>
          A profile is defined not to alter the semantics of the resource representation itself, but to allow clients
          to learn about additional semantics (constraints, conventions, extensions) that are associated with the 
          resource representation, in addition to those defined by the media type and possibly other mechanisms.
        </para>
      </blockquote>
      <para>
        A profile doesn't change what the resource means; a user resource is still about a user. But a profile can
        help with making sense of the resource's representation. If a client retrieves an HTML representation of a
        user, then the vCard profile defines that the <literal>tel</literal> value of a <literal>class</literal>
        attribute in the representation means that the element contains a telephone number <citation>vCard</citation>. 
      </para>
      <para>
        The Semantic Web effort uses profiles based on the Resource Description Framework <citation>RDF</citation> to 
        assign meaning to data, for instance using <citation>JSON-LD</citation>.
        Mike Amundsen has defined an alternative called <firstterm>Application-Level Profile Semantics</firstterm> 
        <citation>ALPS</citation>.
      </para>
      <blockquote>
        <attribution><citation>ALPS</citation></attribution>
        <para>
          An ALPS document can be used as a profile to explain the application semantics of a document with an 
          application-agnostic media type. [...] This increases the reusability of profile documents across
          media types.
        </para>
      </blockquote>
      <para>
        If we program our client to handle the knowledge contained in a semantic profile, then it can work with any 
        API that serves that profile. This is a clean separation of concerns, with the data format specified by the
        media type, and its meaning specified in a separate semantic profile.
      </para>
      <para>
        We propose to add a fourth level to Richardson's maturity model that is defined by the use of semantic 
        profiles, whether in the form of semantic web technology, ALPS, or anything else that serves the same 
        purpose.
      </para>
      <figure id="maturity2">
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/maturity2.png" width="10cm" align="center"/>
          </imageobject>
        </mediaobject>
        <title>Extended REST Maturity Model</title>
      </figure>
    </section>
  </section>
  
  <section>
    <title>Introducing RESTBucks</title>
    <para>
      With the theoretical groundwork laid in the previous section, we can now turn a bit more practical. We want to 
      show you how to build a REST API in all the gory details.
    </para>
    <para>
       We can only do that by showing you an example that is simple enough to understand that we won't waste too much
       time explaining it, but also rich enough for the devil to sneak into the details. We'll follow the leads of 
       <citation>Hohpe04</citation> and <citation>Webber10</citation> and pretend we are working for a company called 
       RESTBucks.
    </para>
    
    <section>
      <title>The RESTBucks Domain</title>
	    <para>
	      RESTBucks is a coffee shop modeled after Starbucks<trademark class="trade"/> that serves its customers hot and
	      cold beverages, pastries and other treats, and collectibles like coffe mugs.
      </para>
      <para>
	      RESTBucks assigns different roles to their employees 
	      to make sure they can serve as many customers as possible. A <firstterm>cashier</firstterm> takes orders and 
	      payments from a customer, while a <firstterm>barista</firstterm> prepares the order. 
	      A <firstterm>manager</firstterm> is in charge of a smooth operation, and a <firstterm>supplier</firstterm> 
	      provides the ingredients necessary to fulfill the orders.
	    </para>
	    <para>
	      In this book we'll replace those humans (including the customers) with computer programs. Each program is a 
	      service that offers a REST API and that may use the REST APIs of other services.
	    </para>
	    <para>
	      The RESTBucks service needs to scale up quickly when demand peaks, for example when people are going to work. 
	      At the same time, RESTBucks needs to continuously improve and expand their offerings to keep customers 
	      satisfied, and to attract new customers. So evolvability is also a concern. Whenever we see a need for
	      scalability and evolvability, we know we have a good case for a REST API.
	    </para>
    </section>
  
	  <section>
	    <title>Software Development At RESTBucks</title>
	    <para>
	      RESTBuck isn't a real company, but a teaching tool. Nowhere is that more apparent than in our choice of
	      software development method. We're going to follow the Waterfall method <citation>Royce75</citation> here,
	      because it is extremely well-known, and cleanly separates the activities into neat phases that are easy to 
	      follow. We understand that in practice these phases blend into each other, but in this book we can give them 
	      focused treatment in different chapters.
	    </para>
	    <para>
	      If RESTBucks were a real company, we probably would have chosen a more Agile way of developing software, so 
	      please don't get distracted by our current choice. We believe that more Agile methods in general work better 
	      than more traditional Waterfall-like methods, but for the most part we'll ignore that in this book. 
	      The exception is that we will present some Agile practices that we think add specific value for building REST 
	      APIs. You are, of course, free to use these practices or ignore them. We'll try to make sure you'll get value 
	      out of this book either way. In the end, this book is not about software development per se, but about
	      developing REST APIs, and we think you can do that with any method.
	    </para>
	    <para>
	      We'll sometimes use an term from Agile methods, like <firstterm>Product Owner</firstterm>. We'll only do that in 
	      the context of a specific Agile practice, like in <xref linkend="bdd"/>. This doesn't necessarily mean you can 
	      only use that practice if you completely adopt the Agile method. There is usually a different term used for the
	      same concept in other methods, but it seems more natural to use Agile terminology when we talk about Agile
	      practices. Again, we won't do that too often.
	    </para>
	    <para>
	      REST APIs lend themselves well to incremental and iterative development. Client and server teams can
	      work in parallel during an iteration and the API can grow by increments between iterations. We will not assume
	      an incremental and iterative software development process in this book, but we do recommend it. If you build up
	      your API over time, you can simply follow the chapters in this book within a single iteration.
	    </para>
	    <para>
	      We grant ourselves the luxury to start from scratch with RESTBuck, because we think that makes the text easier
	      to follow. You may not be so lucky and may have to work with legacy code. Even in greenfield projects you may 
	      be restricted because you have to work from existing industry standards.
	    </para>
	    <para>
	      While these constraints may limit what you can do, the essence of building a REST API remains the same. We are 
	      confident that the techniques presented in the following chapters will work for you as well, although it may 
	      sometimes require a bit of creativity. We'll talk specifically about the differences between starting with 
	      design versus starting with code in <xref linkend="tools"/>.
	    </para>
	    <para>
	      With all these preliminaries out the the way, let's get started building a business that can serve our customers 
	      the hot beverages that fuel their days.
	    </para>
	  </section>
  </section>
  
  <section>
    <title>Summary</title>
    <para>
      This chapter establishes the need for software that is divided into modules. To work together towards a shared 
      goal, modules must communicate with each other. Communication between modules takes the form of a language that 
      we call the Application Programming Interface (API).
    </para>
    <para>
      Each module must be able to evolve and scale independently. This means that some forms of APIs are more suitable 
      for comminication between modules than others. One style that meets all our needs is that of Representational 
      State Transfer (REST).
    </para>
    <para>
      The defining element of REST is hypermedia, where modules exchange self-descriptive messages that contain links 
      to further information and/or operations.
    </para>
    <para>
      In our journey through REST land, we'll pretend to run a company called RESTBucks that serves virtual coffee via 
      REST APIs. We'll follow the implementation of those APIs from start to finish.
    </para>
  </section>
</chapter>
